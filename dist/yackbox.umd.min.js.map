{"version":3,"file":"yackbox.umd.min.js","sources":["../src/yackbox.js"],"sourcesContent":["export default class yackbox {\n    /**\n    *\n    @param {(string|HTMLElement)} div - A string representing the CSS selector of the container element, or an HTMLElement object representing the container element itself.\n    @param {Function} completionCallback - A callback function that will be invoked when the user submits a message. This function will receive an object containing the user's message and username, and two callback functions: one for adding a new message to the chat, and another for appending content to an existing message.\n    @param {Function} streamCallback - A callback function that will be invoked when a streaming message is received. This function will receive an object containing the message content and the ID of the message to update.\n    */\n    constructor(div, completionCallback, streamCallback) {\n        this.container = (typeof (div) == \"string\") ? document.querySelector(div) : (div instanceof HTMLElement) ? div : null;\n        if (!this.container) {\n            console.error(\"Invalid container element for yackbox, creating a new one.\");\n            this.container = document.createElement('div');\n        }\n        this.userName = \"You\";\n        this.userAlignment = \"left\";\n        this.completionCallback = (completionCallback) ? completionCallback : () => { };\n        this.streamCallback = (streamCallback) ? streamCallback : () => { };\n        this.messages = [];\n        this.echo = true; // echo user input\n        this.users = {}\n        // this.users = {}\n        this.initUI();\n    }\n    /**\n    *\n    @param {Function} completionCallback - A callback function that will be invoked when the user submits a message. This function will receive an object containing the user's message and username, and two callback functions: one for adding a new message to the chat, and another for appending content to an existing message.\n    */\n    addCompletionCallback(completionCallback) {\n        this.completionCallback = (completionCallback) ? completionCallback : () => { };\n    }\n    /**\n    *\n    @param {Function} streamCallback - A callback function that will be invoked when a streaming message is received. This function will receive an object containing the message content and the ID of the message to update.\n    */\n    addStreamCallback(streamCallback) {\n        this.streamCallback = (streamCallback) ? streamCallback : () => { };\n    }\n    /**\n    Adds a message from the current user to the chat.\n    @param {string} content - The content of the message.\n    */\n    addUserMessage(content) {\n        this.addMessage(content, this.userName, this.userAlignment);\n    }\n    /**\n    Sets the default username and alignment for user messages.\n    @param {string} user - The username to use for user messages. Defaults to \"You\".\n    @param {string} alignment - The alignment of user messages. Can be \"left\", \"right\", or \"center\". Defaults to \"right\".\n    */\n    setDefaultUserName(user = \"You\", alignment = \"right\") {\n        this.userName = user;\n        this.userAlignement = alignment;\n    }\n    /**\n    Sets whether or not to echo the user's input back to the chat.\n    @param {boolean} echo - True to echo the user's input, false otherwise.\n    @returns {boolean} The current echo setting.\n    */\n    setUserInputEcho(echo) {\n        this.echo = (echo) ? true : false;\n        return this.echo;\n    }\n    /**\n    Shows or hides the input area of the chat.\n    @param {boolean} show - True to show the input area, false to hide it.\n    */\n    showInputArea(show) {\n        if (show) {\n            this.inputAreaBox.style.display = \"\";\n            this.messagesContainer.style.height = \"88%;\"\n        }\n        else {\n            this.inputAreaBox.style.display = \"none\";\n            this.messagesContainer.style.height = \"98%\"\n        }\n    }\n    /**\n    Adds a new message to the chat.\n    @param {string} content - The content of the message.\n    @param {string} user - The username of the sender.\n    @param {string} alignment - The alignment of the message. Can be \"left\", \"right\", or \"center\". Defaults to \"left\".\n    @returns {number} The ID of the newly added message.\n    */\n    // add a new message to the chat\n    addMessage(content, user, alignment = 'left') {\n        const id = this.messages.length;\n        const timestamp = (new Date()).toUTCString();\n        const message = { id, user, content, alignment, timestamp };\n        this.messages.push(message);\n        const lcr = (alignment == \"left\") ? \"yackbox-left\" : (alignment == \"right\") ? \"yackbox-right\" : \"yackbox-center\";\n        const userContent = `<div class=\"yackbox-username ${lcr}\">${user}</div>`;\n        const messageContent = `<div class=\"yackbox-content ${lcr}\">${content}</div>`;\n        const messageHTML = `<div id=\"yackbox-msg-${id}\" class=\"yackbox-message ${lcr}\">${userContent}${messageContent}</div>`;\n        this.messagesContainer.innerHTML += messageHTML;\n        this.messagesContainer.lastChild.scrollIntoView()\n        return id;\n    }\n    /**\n    Updates all the fields of an existing message.\n    @param {number} id - The ID of the message to update.\n    @param {string} content - The new content of the message.\n    @param {string} user - The new username of the sender.\n    @param {string} side - The new alignment of the message. Can be \"left\", \"right\", or \"center\".\n    @returns {number} The ID of the updated message, or undefined if the message was not found.\n    */\n    // update all the fields of an existing message\n    updateMessageFull(id, content, user = null, side = null) {\n        const message = this.messages.find(msg => msg.id === id);\n        if (!message) return;\n        if (content) message.content = content;\n        if (user) message.user = user;\n        if (side) message.whichSide = side;\n        message.lastUpdateTimestamp = (new Date()).toUTCString();\n        const messageDiv = this.container.querySelector(\"#msg - ${id}\");\n        if (messageDiv) {\n            const userContent = `<div class=\"yackbox-username\">${message.user}</div>`;\n            const messageContent = `<div class=\"yackbox-content\">${message.content}</div>`;\n            messageDiv.innerHTML = `${ messageContent }${ userContent }`;\n        }\n        return id;\n    }\n    /**\n    Appends content to an existing message, useful for streaming.\n    @param {number} id - The ID of the message to update.\n    @param {string} content - The content to append to the message.\n    @returns {number} The ID of the updated message, or undefined if the message was not found.\n    */\n    // append content to an existing message, useful for streaming\n    appendMessageContent(id, content) {\n        const message = this.messages.find(msg => msg.id === id);\n        if (!message) return;\n        if (content)\n            message.content += content;\n        message.lastUpdateTimestamp = (new Date()).toUTCString();\n        const messageDiv = this.container.querySelector(`#yackbox-msg-${id} .yackbox-content`);\n        if (messageDiv) {\n            messageDiv.innerHTML = message.content;\n            messageDiv.scrollIntoView(false);\n        }\n        return id;\n    }\n    /**\n    Removes a single message.\n    @param {number} id - The ID of the message to remove.\n    @returns {boolean} True if the message was removed, false otherwise.\n    */\n    // remove a single message\n    removeMessage(id) {\n        const messageIndex = this.messages.findIndex(msg => msg.id === id);\n        if (messageIndex > -1) {\n            this.messages.splice(messageIndex, 1);\n            const messageDiv = this.container.querySelector(\".yackbox-msg${id}\");\n            if (messageDiv) {\n                messageDiv.parentNode.removeChild(messageDiv);\n            }\n            return true;\n        }\n        return false; // didn't do anything\n    }\n    /**\n    Removes all messages from the chat.\n    */\n    //remove all messages\n    removeMessageAll() {\n        this.messages = [];\n    }\n    /**\n    Initializes the UI elements of the chat.\n    */\n    initUI() {\n        this.container.innerHTML = `<div class=\"yackbox-container\"> <div class=\"yackbox-messages\"></div> <div class=\"yackbox-input-area\"> <textarea class=\"yackbox-input-textbox\" placeholder=\"Type here...\"></textarea> <div class=\"yackbox-sep\"></div> <button class=\"yackbox-submit\">Send</button> </div> </div>`;\n        this.messagesContainer = this.container.querySelector('.yackbox-messages');\n        this.messagesContainer.scrollIntoView(false);\n        this.inputAreaBox = this.container.querySelector('.yackbox-input-area');\n        this.inputTextArea = this.container.querySelector('.yackbox-input-textbox');\n        this.submitButton = this.container.querySelector('.yackbox-submit');\n        // Add event listener to the chat input textarea\n        const inputTextarea = this.inputTextArea;\n        // memoize callback fn\n        let admsg = this.addMessage.bind(this);\n        let apndmsg = this.appendMessageContent.bind(this);\n        var addMsgCB = function (c, u, a) { return admsg(c, u, a) };\n        var apndMsgCB = function (id, c) { return apndmsg(id, c) }\n        let handleUserSubmit = () => {\n            // Submit the message\n            const content = inputTextarea.value.trim(); // Remove leading/trailing whitespace\n            if (content !== '') {\n                // if echo, write the user's content to the chat area\n                const user = this.userName;\n                if (this.echo)\n                    this.addMessage(content, user, this.userAlignment);\n                inputTextarea.value = ''; // Clear input field after sending\n                // Call the bot response completionCallback function, passing the user's input\n                this.completionCallback({ content, user }, addMsgCB, apndMsgCB);\n            }\n        }\n        inputTextarea.addEventListener('keydown', (event) => {\n            // Check if Shift + Enter is pressed\n            if (event.shiftKey && event.keyCode === 13) {\n                // Prevent default behavior (adding new line)\n                event.preventDefault();\n                handleUserSubmit();\n            }\n        });\n        this.submitButton.addEventListener('click', () => { handleUserSubmit() });\n    }\n    /**\n    Returns a portion of the message history.\n    @param {number} n - The starting index of the messages to retrieve. If negative, it will be counted from the end of the message history.\n    @param {number} m - Optional. The ending index of the messages to retrieve. If omitted, only the message at index n will be returned.\n    @returns {Array} An array of message objects, or an empty array if there are no messages or the indices are invalid.\n    */\n    getMessageHistory(n, m) {\n        if (this.messages.length <= 0)\n            return [];\n        if (typeof (n) != \"number\")\n            return [];\n        if (typeof (m) == \"number\") {\n            if (n < m)\n                return this.messages.slice(n, m);\n            else\n                return this.messages.slice(m, n);\n        }\n        else {\n            if (n < 0)\n                n = this.messages.length + n;\n            return [this.messages[n]]\n        }\n    }\n    /**\n    Returns statistics about the chat messages.\n    @returns {Object} An object containing the following statistics:\n    numMessages: The total number of messages in the chat.\n    numUsers: The number of unique users who have sent messages.\n    firstMsgTimestamp: The timestamp of the first message in the chat.\n    lastMsgTimestamp: The timestamp of the last message in the chat.\n    */\n    getMessageStats() {\n        let stats = {\n            \"numMessages\": this.messages.length,\n           // \"numUsers\": this.users.keys().length,\n            \"firstMsgTimestamp\": this.messages.length > 0 ? this.messages[0].timestamp : \"\",\n            \"lastMsgTimestamp\": this.messages.length > 0 ? this.messages[this.messages.length - 1].timestamp : \"\",\n        }\n        return stats;\n    }\n}"],"names":["yackbox","div","completionCallback","streamCallback","_classCallCheck","this","container","document","querySelector","HTMLElement","console","error","createElement","userName","userAlignment","messages","echo","users","initUI","key","value","content","addMessage","user","arguments","length","undefined","alignment","userAlignement","show","inputAreaBox","style","display","messagesContainer","height","id","message","timestamp","Date","toUTCString","push","lcr","userContent","concat","messageContent","messageHTML","innerHTML","lastChild","scrollIntoView","side","find","msg","whichSide","lastUpdateTimestamp","messageDiv","messageIndex","findIndex","splice","parentNode","removeChild","_this","inputTextArea","submitButton","inputTextarea","admsg","bind","apndmsg","appendMessageContent","addMsgCB","c","u","a","apndMsgCB","handleUserSubmit","trim","addEventListener","event","shiftKey","keyCode","preventDefault","n","m","slice","numMessages","firstMsgTimestamp","lastMsgTimestamp"],"mappings":"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"}