{"version":3,"file":"yackbox.esm.min.js","sources":["../src/yackbox.js"],"sourcesContent":["export default class yackbox {\n    /**\n    *\n    @param {(string|HTMLElement)} div - A string representing the CSS selector of the container element, or an HTMLElement object representing the container element itself.\n    @param {Function} completionCallback - A callback function that will be invoked when the user submits a message. This function will receive an object containing the user's message and username, and two callback functions: one for adding a new message to the chat, and another for appending content to an existing message.\n    @param {Function} streamCallback - A callback function that will be invoked when a streaming message is received. This function will receive an object containing the message content and the ID of the message to update.\n    */\n    constructor(div, completionCallback, streamCallback) {\n        this.container = (typeof (div) == \"string\") ? document.querySelector(div) : (div instanceof HTMLElement) ? div : null;\n        if (!this.container) {\n            console.error(\"Invalid container element for yackbox, creating a new element.\");\n            this.container = document.createElement('div');\n        }\n        // title\n        this.title = \"Chat\";\n        this.titleAlignment = \"center\";\n\n        // user add\n        this.userName = \"You\";\n        this.userAlignment = \"left\";\n\n        // callback functions\n        this.completionCallback = (completionCallback) ? completionCallback : () => { };\n        this.streamCallback = (streamCallback) ? streamCallback : () => { };\n\n        // history\n        this.messages = [];\n        this.echo = true; // echo user input\n        this.users = {}\n        // this.users = {}\n        this.initUI();\n    }\n    /**\n    *\n    @param {Function} completionCallback - A callback function that will be invoked when the user submits a message. This function will receive an object containing the user's message and username, and two callback functions: one for adding a new message to the chat, and another for appending content to an existing message.\n    */\n    addCompletionCallback(completionCallback) {\n        this.completionCallback = (completionCallback) ? completionCallback : () => { };\n    }\n    /**\n    *\n    @param {Function} streamCallback - A callback function that will be invoked when a streaming message is received. This function will receive an object containing the message content and the ID of the message to update.\n    */\n    addStreamCallback(streamCallback) {\n        this.streamCallback = (streamCallback) ? streamCallback : () => { };\n    }\n    /**\n    Adds a message from the current user to the chat.\n    @param {string} content - The content of the message.\n    */\n    addUserMessage(content) {\n        this.addMessage(content, this.userName, this.userAlignment);\n    }\n    /**\n    Sets the default username and alignment for user messages.\n    @param {string} user - The username to use for user messages. Defaults to \"You\".\n    @param {string} alignment - The alignment of user messages. Can be \"left\", \"right\", or \"center\". Defaults to \"right\".\n    */\n    setDefaultUserName(user = \"You\", alignment = \"right\") {\n        this.userName = user;\n        this.userAlignement = alignment;\n    }\n    /**\n    Sets whether or not to echo the user's input back to the chat.\n    @param {boolean} echo - True to echo the user's input, false otherwise.\n    @returns {boolean} The current echo setting.\n    */\n    setUserInputEcho(echo) {\n        this.echo = (echo) ? true : false;\n        return this.echo;\n    }\n\n    /**\n     * Adjusts the height of the messages area to fit the chat widget.\n     * This method should be called whenever the chat widget is resized.\n     */\n    adjustMessagesAreaHeight() {\n        const chatWidget = this.container;\n        const hiddenElements = [...chatWidget.children].filter(child => child.classList.contains('hidden'));\n        const totalHiddenHeight = hiddenElements.reduce((sum, child) => sum + child.offsetHeight, 0);\n        const containerHeight = chatWidget.offsetHeight;\n        this.messagesContainer.style.height = `calc(100% - ${containerHeight - totalHiddenHeight}px)`;\n    }\n  \n    handleContainerResize() {\n        adjustMessagesAreaHeight();\n        adjustSendButtonWidth();\n    }\n\n    adjustSendButtonWidth() {\n        const submitButtonText = this.submitButton.textContent.trim();\n        const fontSize = parseFloat(getComputedStyle(this.submitButton).fontSize);\n        const minWidth = fontSize * submitButtonText.length + 16; // Adjust the multiplier as needed\n        this.submitButton.style.minWidth = `${minWidth}px`;\n    }\n\n\n\n\n    /**\n    Shows or hides the input area of the chat.\n    @param {boolean} show - True to show the input area, false to hide it.\n    */\n    showInputArea(show) {\n        if (show) {\n            this.inputAreaBox.style.display = \"flex\";\n            this.inputAreaBox.classList.remove('hidden');\n        }\n        else {\n            this.inputAreaBox.style.display = \"none\";\n            this.inputAreaBox.classList.add('hidden');\n        }\n        this.adjustMessagesAreaHeight();\n    }\n\n    showTitleArea(show) {\n        if (show) {\n            this.titleArea.style.display = \"flex\";\n            this.titleArea.classList.remove('hidden');\n        }\n        else {\n            this.titleArea.style.display = \"none\";\n            this.titleArea.classList.add('hidden');\n        }\n        this.adjustMessagesAreaHeight();\n    }\n\n    /**\n    Adds a new message to the chat.\n    @param {string} content - The content of the message.\n    @param {string} user - The username of the sender.\n    @param {string} alignment - The alignment of the message. Can be \"left\", \"right\", or \"center\". Defaults to \"left\".\n    @returns {number} The ID of the newly added message.\n    */\n    // add a new message to the chat\n    addMessage(content, user, alignment = 'left') {\n        const id = this.messages.length;\n        const timestamp = (new Date()).toUTCString();\n        const message = { id, user, content, alignment, timestamp };\n        this.messages.push(message);\n        const lcr = (alignment == \"left\") ? \"yackbox-left\" : (alignment == \"right\") ? \"yackbox-right\" : \"yackbox-center\";\n        const userContent = `<div class=\"yackbox-username ${lcr}\">${user}</div>`;\n        const messageContent = `<div class=\"yackbox-content ${lcr}\">${content}</div>`;\n        const messageHTML = `<div id=\"yackbox-msg-${id}\" class=\"yackbox-message ${lcr}\">${userContent}${messageContent}</div>`;\n        this.messagesContainer.innerHTML += messageHTML;\n        this.messagesContainer.lastChild.scrollIntoView()\n        return id;\n    }\n    /**\n    Updates all the fields of an existing message.\n    @param {number} id - The ID of the message to update.\n    @param {string} content - The new content of the message.\n    @param {string} user - The new username of the sender.\n    @param {string} side - The new alignment of the message. Can be \"left\", \"right\", or \"center\".\n    @returns {number} The ID of the updated message, or undefined if the message was not found.\n    */\n    // update all the fields of an existing message\n    updateMessageFull(id, content, user = null, side = null) {\n        const message = this.messages.find(msg => msg.id === id);\n        if (!message) return;\n        if (content) message.content = content;\n        if (user) message.user = user;\n        if (side) message.whichSide = side;\n        message.lastUpdateTimestamp = (new Date()).toUTCString();\n        const messageDiv = this.container.querySelector(\"#msg - ${id}\");\n        if (messageDiv) {\n            const userContent = `<div class=\"yackbox-username\">${message.user}</div>`;\n            const messageContent = `<div class=\"yackbox-content\">${message.content}</div>`;\n            messageDiv.innerHTML = `${messageContent}${userContent}`;\n        }\n        return id;\n    }\n    /**\n    Appends content to an existing message, useful for streaming.\n    @param {number} id - The ID of the message to update.\n    @param {string} content - The content to append to the message.\n    @returns {number} The ID of the updated message, or undefined if the message was not found.\n    */\n    // append content to an existing message, useful for streaming\n    appendMessageContent(id, content) {\n        const message = this.messages.find(msg => msg.id === id);\n        if (!message) return;\n        if (content)\n            message.content += content;\n        message.lastUpdateTimestamp = (new Date()).toUTCString();\n        const messageDiv = this.container.querySelector(`#yackbox-msg-${id} .yackbox-content`);\n        if (messageDiv) {\n            messageDiv.innerHTML = message.content;\n            messageDiv.scrollIntoView(false);\n        }\n        return id;\n    }\n    /**\n    Removes a single message.\n    @param {number} id - The ID of the message to remove.\n    @returns {boolean} True if the message was removed, false otherwise.\n    */\n    // remove a single message\n    removeMessage(id) {\n        const messageIndex = this.messages.findIndex(msg => msg.id === id);\n        if (messageIndex > -1) {\n            this.messages.splice(messageIndex, 1);\n            const messageDiv = this.container.querySelector(\".yackbox-msg${id}\");\n            if (messageDiv) {\n                messageDiv.parentNode.removeChild(messageDiv);\n            }\n            return true;\n        }\n        return false; // didn't do anything\n    }\n    /**\n    Removes all messages from the chat.\n    */\n    //remove all messages\n    removeMessageAll() {\n        this.messages = [];\n    }\n    /**\n    Initializes the UI elements of the chat.\n    */\n    initUI() {\n        this.container.innerHTML = \n        `<div class=\"yackbox-base yackbox-theme-light\"> \n            <div class=\"yackbox-title-area\"></div>\n            <div class=\"yackbox-messages-area\"></div> \n            <div class=\"yackbox-input-area\"> \n                <textarea class=\"yackbox-input-textbox\" placeholder=\"Type here...\"></textarea> \n                <button class=\"yackbox-input-send-btn\">Send</button>\n            </div>\n        </div>`;\n\n        // in-line styles : Note these settings are just for making the basic plumbing work and \n        // are not part of styling the chatbox.  The chatbox is styled using the yackbox.css file\n        /*\n        this.baseStyles = {\n            \"yackbox-base\": {\n                \"display\": \"flex\",\n                \"flex-direction\": \"column\",\n                \"height\": \"100%\",\n                \"width\": \"100%\",\n                \"min-width\": \"200px\",\n                \"min-height\": \"200px\",\n            },\n            \"yackbox-title-area\": {\n                \"width\": \"100%\",\n                \"padding-left\": \"8px\",\n                \"padding-right\": \"8px\",\n            },\n\n            \"yackbox-messages-area\": {\n                \"flex-grow\": \"1\",\n                \"padding\": \"8px\",\n                \"overflow-y\": \"auto\",\n                \"width\": \"100%\",\n            },\n\n            \"yackbox-message\": {\n                \"padding\": \"2px\"\n            },\n\n            \"yackbox-input-area\": {\n                \"display\": \"flex\",\n                \"align-items\": \"center\",\n                \"padding\": \"8px\",\n                \"min-height\": \"56px\",\n                \"height\": \"4em\",\n                \"width\": \"100%\"\n            },\n            \"yackbox-input-textbox\": {\n                \"flex-grow\": \"1\",\n                \"min-height\": \"40px\",\n                \"resize\": \"none\",\n                \"padding\": \"8px\"\n            },\n            \"yackbox-input-send-btn\": {\n                \"margin-left\": \"8px\",\n                \"padding\": \"8px 12px\",\n                \"height\": \"100%\",\n                \"cursor\": \"pointer\",\n                \"white-space\": \"nowrap\"\n            }\n        }\n        */\n        let setStyles = (el, styles) => {\n            for (let s in styles) {\n                el.style[s] = styles[s];\n            }\n        }\n        this.yackboxContainer = this.container.querySelector('.yackbox-base');\n        this.titleArea = this.container.querySelector('.yackbox-title-area');\n        this.titleArea.innerHTML = \"<h3>\" +this.title+\"</h3>\";\n       \n        //setStyles (this.titleArea, this.baseStyles[\"yackbox-title-area\"]);\n\n        this.messagesContainer = this.container.querySelector('.yackbox-messages-area');\n        //setStyles(this.messagesContainer, this.baseStyles[\"yackbox-messages-area\"]);\n\n        this.messagesContainer.scrollIntoView(false);\n        this.inputAreaBox = this.container.querySelector('.yackbox-input-area');\n        //setStyles(this.inputAreaBox, this.baseStyles[\"yackbox-input-area\"]);\n\n        this.inputTextArea = this.container.querySelector('.yackbox-input-textbox');\n        //setStyles(this.inputTextArea, this.baseStyles[\"yackbox-input-textbox\"]);\n\n        this.submitButton = this.container.querySelector('.yackbox-input-send-btn');\n        //setStyles(this.submitButton, this.baseStyles[\"yackbox-input-send-btn\"]);\n\n        // now we add the base styles for the chat container and sub elements\n        // set base styles for the chat container.  NOTE this is done in js so that we can have \n        // multiple instances of the chatbox on the same page with different styles\n        // see yaclbox.css for the default styles\n\n\n\n        //===================================================================================\n        // Add event listener to the chat input textarea\n        const inputTextarea = this.inputTextArea;\n        // memoize callback fn\n        let admsg = this.addMessage.bind(this);\n        let apndmsg = this.appendMessageContent.bind(this);\n        var addMsgCB = function (c, u, a) { return admsg(c, u, a) };\n        var apndMsgCB = function (id, c) { return apndmsg(id, c) }\n        let handleUserSubmit = () => {\n            // Submit the message\n            const content = inputTextarea.value.trim(); // Remove leading/trailing whitespace\n            if (content !== '') {\n                // if echo, write the user's content to the chat area\n                const user = this.userName;\n                if (this.echo)\n                    this.addMessage(content, user, this.userAlignment);\n                inputTextarea.value = ''; // Clear input field after sending\n                // Call the bot response completionCallback function, passing the user's input\n                this.completionCallback({ content, user }, addMsgCB, apndMsgCB);\n            }\n        }\n        inputTextarea.addEventListener('keydown', (event) => {\n            // Check if Shift + Enter is pressed\n            if (event.shiftKey && event.keyCode === 13) {\n                // Prevent default behavior (adding new line)\n                event.preventDefault();\n                handleUserSubmit();\n            }\n        });\n        this.submitButton.addEventListener('click', () => { handleUserSubmit() });\n\n        this.container.addEventListener('resize', ()=> {handleContainerResize()});\n        this.adjustMessagesAreaHeight();\n        this.adjustSendButtonWidth();\n        this.showTitleArea(false);\n    }\n    /**\n    Returns a portion of the message history.\n    @param {number} n - The starting index of the messages to retrieve. If negative, it will be counted from the end of the message history.\n    @param {number} m - Optional. The ending index of the messages to retrieve. If omitted, only the message at index n will be returned.\n    @returns {Array} An array of message objects, or an empty array if there are no messages or the indices are invalid.\n    */\n    getMessageHistory(n, m) {\n        if (this.messages.length <= 0)\n            return [];\n        if (typeof (n) != \"number\")\n            return [];\n        if (typeof (m) == \"number\") {\n            if (n < m)\n                return this.messages.slice(n, m);\n            else\n                return this.messages.slice(m, n);\n        }\n        else {\n            if (n < 0)\n                n = this.messages.length + n;\n            return [this.messages[n]]\n        }\n    }\n    /**\n    Returns statistics about the chat messages.\n    @returns {Object} An object containing the following statistics:\n    numMessages: The total number of messages in the chat.\n    numUsers: The number of unique users who have sent messages.\n    firstMsgTimestamp: The timestamp of the first message in the chat.\n    lastMsgTimestamp: The timestamp of the last message in the chat.\n    */\n    getMessageStats() {\n        let stats = {\n            \"numMessages\": this.messages.length,\n            // \"numUsers\": this.users.keys().length,\n            \"firstMsgTimestamp\": this.messages.length > 0 ? this.messages[0].timestamp : \"\",\n            \"lastMsgTimestamp\": this.messages.length > 0 ? this.messages[this.messages.length - 1].timestamp : \"\",\n        }\n        return stats;\n    }\n}"],"names":["yackbox","div","completionCallback","streamCallback","_classCallCheck","this","container","document","querySelector","HTMLElement","console","error","createElement","title","titleAlignment","userName","userAlignment","messages","echo","users","initUI","key","value","content","addMessage","user","arguments","length","undefined","alignment","userAlignement","chatWidget","totalHiddenHeight","_toConsumableArray","children","filter","child","classList","contains","reduce","sum","offsetHeight","containerHeight","messagesContainer","style","height","concat","adjustMessagesAreaHeight","adjustSendButtonWidth","submitButtonText","submitButton","textContent","trim","minWidth","parseFloat","getComputedStyle","fontSize","show","inputAreaBox","display","remove","add","titleArea","id","message","timestamp","Date","toUTCString","push","lcr","userContent","messageContent","messageHTML","innerHTML","lastChild","scrollIntoView","side","find","msg","whichSide","lastUpdateTimestamp","messageDiv","messageIndex","findIndex","splice","parentNode","removeChild","_this","yackboxContainer","inputTextArea","inputTextarea","admsg","bind","apndmsg","appendMessageContent","addMsgCB","c","u","a","apndMsgCB","handleUserSubmit","addEventListener","event","shiftKey","keyCode","preventDefault","handleContainerResize","showTitleArea","n","m","slice","numMessages","firstMsgTimestamp","lastMsgTimestamp"],"mappings":"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"}