{"version":3,"file":"yackbox.umd.js","sources":["../src/yackbox.js"],"sourcesContent":["export default class yackbox {\n    /**\n    *\n    @param {(string|HTMLElement)} div - A string representing the CSS selector of the container element, or an HTMLElement object representing the container element itself.\n    @param {Function} completionCallback - A callback function that will be invoked when the user submits a message. This function will receive an object containing the user's message and username, and two callback functions: one for adding a new message to the chat, and another for appending content to an existing message.\n    @param {Function} streamCallback - A callback function that will be invoked when a streaming message is received. This function will receive an object containing the message content and the ID of the message to update.\n    */\n    constructor(div, completionCallback, streamCallback) {\n        this.container = (typeof (div) == \"string\") ? document.querySelector(div) : (div instanceof HTMLElement) ? div : null;\n        if (!this.container) {\n            console.error(\"Invalid container element for yackbox, creating a new one.\");\n            this.container = document.createElement('div');\n        }\n        this.userName = \"You\";\n        this.userAlignment = \"left\";\n        this.completionCallback = (completionCallback) ? completionCallback : () => { };\n        this.streamCallback = (streamCallback) ? streamCallback : () => { };\n        this.messages = [];\n        this.echo = true; // echo user input\n        this.users = {}\n        // this.users = {}\n        this.initUI();\n    }\n    /**\n    *\n    @param {Function} completionCallback - A callback function that will be invoked when the user submits a message. This function will receive an object containing the user's message and username, and two callback functions: one for adding a new message to the chat, and another for appending content to an existing message.\n    */\n    addCompletionCallback(completionCallback) {\n        this.completionCallback = (completionCallback) ? completionCallback : () => { };\n    }\n    /**\n    *\n    @param {Function} streamCallback - A callback function that will be invoked when a streaming message is received. This function will receive an object containing the message content and the ID of the message to update.\n    */\n    addStreamCallback(streamCallback) {\n        this.streamCallback = (streamCallback) ? streamCallback : () => { };\n    }\n    /**\n    Adds a message from the current user to the chat.\n    @param {string} content - The content of the message.\n    */\n    addUserMessage(content) {\n        this.addMessage(content, this.userName, this.userAlignment);\n    }\n    /**\n    Sets the default username and alignment for user messages.\n    @param {string} user - The username to use for user messages. Defaults to \"You\".\n    @param {string} alignment - The alignment of user messages. Can be \"left\", \"right\", or \"center\". Defaults to \"right\".\n    */\n    setDefaultUserName(user = \"You\", alignment = \"right\") {\n        this.userName = user;\n        this.userAlignement = alignment;\n    }\n    /**\n    Sets whether or not to echo the user's input back to the chat.\n    @param {boolean} echo - True to echo the user's input, false otherwise.\n    @returns {boolean} The current echo setting.\n    */\n    setUserInputEcho(echo) {\n        this.echo = (echo) ? true : false;\n        return this.echo;\n    }\n    /**\n    Shows or hides the input area of the chat.\n    @param {boolean} show - True to show the input area, false to hide it.\n    */\n    showInputArea(show) {\n        if (show) {\n            this.inputAreaBox.style.display = \"\";\n            this.messagesContainer.style.height = \"88%;\"\n        }\n        else {\n            this.inputAreaBox.style.display = \"none\";\n            this.messagesContainer.style.height = \"98%\"\n        }\n    }\n    /**\n    Adds a new message to the chat.\n    @param {string} content - The content of the message.\n    @param {string} user - The username of the sender.\n    @param {string} alignment - The alignment of the message. Can be \"left\", \"right\", or \"center\". Defaults to \"left\".\n    @returns {number} The ID of the newly added message.\n    */\n    // add a new message to the chat\n    addMessage(content, user, alignment = 'left') {\n        const id = this.messages.length;\n        const timestamp = (new Date()).toUTCString();\n        const message = { id, user, content, alignment, timestamp };\n        this.messages.push(message);\n        const lcr = (alignment == \"left\") ? \"yackbox-left\" : (alignment == \"right\") ? \"yackbox-right\" : \"yackbox-center\";\n        const userContent = `<div class=\"yackbox-username ${lcr}\">${user}</div>`;\n        const messageContent = `<div class=\"yackbox-content ${lcr}\">${content}</div>`;\n        const messageHTML = `<div id=\"yackbox-msg-${id}\" class=\"yackbox-message ${lcr}\">${userContent}${messageContent}</div>`;\n        this.messagesContainer.innerHTML += messageHTML;\n        this.messagesContainer.lastChild.scrollIntoView()\n        return id;\n    }\n    /**\n    Updates all the fields of an existing message.\n    @param {number} id - The ID of the message to update.\n    @param {string} content - The new content of the message.\n    @param {string} user - The new username of the sender.\n    @param {string} side - The new alignment of the message. Can be \"left\", \"right\", or \"center\".\n    @returns {number} The ID of the updated message, or undefined if the message was not found.\n    */\n    // update all the fields of an existing message\n    updateMessageFull(id, content, user = null, side = null) {\n        const message = this.messages.find(msg => msg.id === id);\n        if (!message) return;\n        if (content) message.content = content;\n        if (user) message.user = user;\n        if (side) message.whichSide = side;\n        message.lastUpdateTimestamp = (new Date()).toUTCString();\n        const messageDiv = this.container.querySelector(\"#msg - ${id}\");\n        if (messageDiv) {\n            const userContent = `<div class=\"yackbox-username\">${message.user}</div>`;\n            const messageContent = `<div class=\"yackbox-content\">${message.content}</div>`;\n            messageDiv.innerHTML = `${ messageContent }${ userContent }`;\n        }\n        return id;\n    }\n    /**\n    Appends content to an existing message, useful for streaming.\n    @param {number} id - The ID of the message to update.\n    @param {string} content - The content to append to the message.\n    @returns {number} The ID of the updated message, or undefined if the message was not found.\n    */\n    // append content to an existing message, useful for streaming\n    appendMessageContent(id, content) {\n        const message = this.messages.find(msg => msg.id === id);\n        if (!message) return;\n        if (content)\n            message.content += content;\n        message.lastUpdateTimestamp = (new Date()).toUTCString();\n        const messageDiv = this.container.querySelector(`#yackbox-msg-${id} .yackbox-content`);\n        if (messageDiv) {\n            messageDiv.innerHTML = message.content;\n            messageDiv.scrollIntoView(false);\n        }\n        return id;\n    }\n    /**\n    Removes a single message.\n    @param {number} id - The ID of the message to remove.\n    @returns {boolean} True if the message was removed, false otherwise.\n    */\n    // remove a single message\n    removeMessage(id) {\n        const messageIndex = this.messages.findIndex(msg => msg.id === id);\n        if (messageIndex > -1) {\n            this.messages.splice(messageIndex, 1);\n            const messageDiv = this.container.querySelector(\".yackbox-msg${id}\");\n            if (messageDiv) {\n                messageDiv.parentNode.removeChild(messageDiv);\n            }\n            return true;\n        }\n        return false; // didn't do anything\n    }\n    /**\n    Removes all messages from the chat.\n    */\n    //remove all messages\n    removeMessageAll() {\n        this.messages = [];\n    }\n    /**\n    Initializes the UI elements of the chat.\n    */\n    initUI() {\n        this.container.innerHTML = `<div class=\"yackbox-container\"> <div class=\"yackbox-messages\"></div> <div class=\"yackbox-input-area\"> <textarea class=\"yackbox-input-textbox\" placeholder=\"Type here...\"></textarea> <div class=\"yackbox-sep\"></div> <button class=\"yackbox-submit\">Send</button> </div> </div>`;\n        this.messagesContainer = this.container.querySelector('.yackbox-messages');\n        this.messagesContainer.scrollIntoView(false);\n        this.inputAreaBox = this.container.querySelector('.yackbox-input-area');\n        this.inputTextArea = this.container.querySelector('.yackbox-input-textbox');\n        this.submitButton = this.container.querySelector('.yackbox-submit');\n        // Add event listener to the chat input textarea\n        const inputTextarea = this.inputTextArea;\n        // memoize callback fn\n        let admsg = this.addMessage.bind(this);\n        let apndmsg = this.appendMessageContent.bind(this);\n        var addMsgCB = function (c, u, a) { return admsg(c, u, a) };\n        var apndMsgCB = function (id, c) { return apndmsg(id, c) }\n        let handleUserSubmit = () => {\n            // Submit the message\n            const content = inputTextarea.value.trim(); // Remove leading/trailing whitespace\n            if (content !== '') {\n                // if echo, write the user's content to the chat area\n                const user = this.userName;\n                if (this.echo)\n                    this.addMessage(content, user, this.userAlignment);\n                inputTextarea.value = ''; // Clear input field after sending\n                // Call the bot response completionCallback function, passing the user's input\n                this.completionCallback({ content, user }, addMsgCB, apndMsgCB);\n            }\n        }\n        inputTextarea.addEventListener('keydown', (event) => {\n            // Check if Shift + Enter is pressed\n            if (event.shiftKey && event.keyCode === 13) {\n                // Prevent default behavior (adding new line)\n                event.preventDefault();\n                handleUserSubmit();\n            }\n        });\n        this.submitButton.addEventListener('click', () => { handleUserSubmit() });\n    }\n    /**\n    Returns a portion of the message history.\n    @param {number} n - The starting index of the messages to retrieve. If negative, it will be counted from the end of the message history.\n    @param {number} m - Optional. The ending index of the messages to retrieve. If omitted, only the message at index n will be returned.\n    @returns {Array} An array of message objects, or an empty array if there are no messages or the indices are invalid.\n    */\n    getMessageHistory(n, m) {\n        if (this.messages.length <= 0)\n            return [];\n        if (typeof (n) != \"number\")\n            return [];\n        if (typeof (m) == \"number\") {\n            if (n < m)\n                return this.messages.slice(n, m);\n            else\n                return this.messages.slice(m, n);\n        }\n        else {\n            if (n < 0)\n                n = this.messages.length + n;\n            return [this.messages[n]]\n        }\n    }\n    /**\n    Returns statistics about the chat messages.\n    @returns {Object} An object containing the following statistics:\n    numMessages: The total number of messages in the chat.\n    numUsers: The number of unique users who have sent messages.\n    firstMsgTimestamp: The timestamp of the first message in the chat.\n    lastMsgTimestamp: The timestamp of the last message in the chat.\n    */\n    getMessageStats() {\n        let stats = {\n            \"numMessages\": this.messages.length,\n           // \"numUsers\": this.users.keys().length,\n            \"firstMsgTimestamp\": this.messages.length > 0 ? this.messages[0].timestamp : \"\",\n            \"lastMsgTimestamp\": this.messages.length > 0 ? this.messages[this.messages.length - 1].timestamp : \"\",\n        }\n        return stats;\n    }\n}"],"names":["yackbox","div","completionCallback","streamCallback","_classCallCheck","container","document","querySelector","HTMLElement","console","error","createElement","userName","userAlignment","messages","echo","users","initUI","_createClass","key","value","addCompletionCallback","addStreamCallback","addUserMessage","content","addMessage","setDefaultUserName","user","arguments","length","undefined","alignment","userAlignement","setUserInputEcho","showInputArea","show","inputAreaBox","style","display","messagesContainer","height","id","timestamp","Date","toUTCString","message","push","lcr","userContent","concat","messageContent","messageHTML","innerHTML","lastChild","scrollIntoView","updateMessageFull","side","find","msg","whichSide","lastUpdateTimestamp","messageDiv","appendMessageContent","removeMessage","messageIndex","findIndex","splice","parentNode","removeChild","removeMessageAll","_this","inputTextArea","submitButton","inputTextarea","admsg","bind","apndmsg","addMsgCB","c","u","a","apndMsgCB","handleUserSubmit","trim","addEventListener","event","shiftKey","keyCode","preventDefault","getMessageHistory","n","m","slice","getMessageStats","stats"],"mappings":"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"}